# Autogenerated from a Treetop grammar. Edits may be lost.


module OrigenSTIL
  module Syntax
    module Grammar
      include Treetop::Runtime

      def root
        @root ||= :stil_source
      end

      module StilSource0
        def to_ast
          n :stil_source, *elements_to_ast
        end
      end

      def _nt_stil_source
        start_index = index
        if node_cache[:stil_source].has_key?(index)
          cached = node_cache[:stil_source][index]
          if cached
            node_cache[:stil_source][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        s0, i0 = [], index
        loop do
          r1 = _nt_stil_source_items
          if r1
            s0 << r1
          else
            break
          end
        end
        if s0.empty?
          @index = i0
          r0 = nil
        else
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(StilSource0)
          r0.extend(StilSource0)
        end

        node_cache[:stil_source][start_index] = r0

        r0
      end

      def _nt_stil_source_items
        start_index = index
        if node_cache[:stil_source_items].has_key?(index)
          cached = node_cache[:stil_source_items][index]
          if cached
            node_cache[:stil_source_items][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0 = index
        r1 = _nt_S
        if r1
          r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
          r0 = r1
        else
          r2 = _nt_N
          if r2
            r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
            r0 = r2
          else
            r3 = _nt_block_comment
            if r3
              r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
              r0 = r3
            else
              r4 = _nt_one_line_comment
              if r4
                r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
                r0 = r4
              else
                r5 = _nt_stil_version
                if r5
                  r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
                  r0 = r5
                else
                  @index = i0
                  r0 = nil
                end
              end
            end
          end
        end

        node_cache[:stil_source_items][start_index] = r0

        r0
      end

      module StilVersion0
        def s1
          elements[0]
        end

        def S
          elements[2]
        end

        def major
          elements[3]
        end

        def minor
          elements[5]
        end

        def s2
          elements[6]
        end

      end

      module StilVersion1
        def to_ast
          n :version, major.text_value.to_i, minor.text_value.to_i
        end
      end

      def _nt_stil_version
        start_index = index
        if node_cache[:stil_version].has_key?(index)
          cached = node_cache[:stil_version][index]
          if cached
            node_cache[:stil_version][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        r1 = _nt_s
        s0 << r1
        if r1
          if (match_len = has_terminal?("STIL", false, index))
            r2 = instantiate_node(SyntaxNode,input, index...(index + match_len))
            @index += match_len
          else
            terminal_parse_failure('"STIL"')
            r2 = nil
          end
          s0 << r2
          if r2
            r3 = _nt_S
            s0 << r3
            if r3
              if has_terminal?(@regexps[gr = '\A[0-9]'] ||= Regexp.new(gr), :regexp, index)
                r4 = true
                @index += 1
              else
                terminal_parse_failure('[0-9]')
                r4 = nil
              end
              s0 << r4
              if r4
                if (match_len = has_terminal?(".", false, index))
                  r5 = true
                  @index += match_len
                else
                  terminal_parse_failure('"."')
                  r5 = nil
                end
                s0 << r5
                if r5
                  if has_terminal?(@regexps[gr = '\A[0-9]'] ||= Regexp.new(gr), :regexp, index)
                    r6 = true
                    @index += 1
                  else
                    terminal_parse_failure('[0-9]')
                    r6 = nil
                  end
                  s0 << r6
                  if r6
                    r7 = _nt_s
                    s0 << r7
                    if r7
                      if (match_len = has_terminal?(";", false, index))
                        r8 = true
                        @index += match_len
                      else
                        terminal_parse_failure('";"')
                        r8 = nil
                      end
                      s0 << r8
                    end
                  end
                end
              end
            end
          end
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(StilVersion0)
          r0.extend(StilVersion1)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:stil_version][start_index] = r0

        r0
      end

      def _nt_comment
        start_index = index
        if node_cache[:comment].has_key?(index)
          cached = node_cache[:comment][index]
          if cached
            node_cache[:comment][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0 = index
        r1 = _nt_one_line_comment
        if r1
          r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
          r0 = r1
        else
          r2 = _nt_block_comment
          if r2
            r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
            r0 = r2
          else
            @index = i0
            r0 = nil
          end
        end

        node_cache[:comment][start_index] = r0

        r0
      end

      module BlockComment0
      end

      module BlockComment1
        def end_of_comment
          elements[2]
        end
      end

      def _nt_block_comment
        start_index = index
        if node_cache[:block_comment].has_key?(index)
          cached = node_cache[:block_comment][index]
          if cached
            node_cache[:block_comment][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        if (match_len = has_terminal?("/*", false, index))
          r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('"/*"')
          r1 = nil
        end
        s0 << r1
        if r1
          s2, i2 = [], index
          loop do
            i3, s3 = index, []
            i4 = index
            r5 = _nt_end_of_comment
            if r5
              @index = i4
              r4 = nil
            else
              @index = i4
              r4 = instantiate_node(SyntaxNode,input, index...index)
            end
            s3 << r4
            if r4
              if index < input_length
                r6 = true
                @index += 1
              else
                terminal_parse_failure("any character")
                r6 = nil
              end
              s3 << r6
            end
            if s3.last
              r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
              r3.extend(BlockComment0)
            else
              @index = i3
              r3 = nil
            end
            if r3
              s2 << r3
            else
              break
            end
          end
          r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
          s0 << r2
          if r2
            r7 = _nt_end_of_comment
            s0 << r7
          end
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(BlockComment1)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:block_comment][start_index] = r0

        r0
      end

      def _nt_end_of_comment
        start_index = index
        if node_cache[:end_of_comment].has_key?(index)
          cached = node_cache[:end_of_comment][index]
          if cached
            node_cache[:end_of_comment][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        if (match_len = has_terminal?("*.", false, index))
          r0 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('"*."')
          r0 = nil
        end

        node_cache[:end_of_comment][start_index] = r0

        r0
      end

      module OneLineComment0
      end

      module OneLineComment1
      end

      def _nt_one_line_comment
        start_index = index
        if node_cache[:one_line_comment].has_key?(index)
          cached = node_cache[:one_line_comment][index]
          if cached
            node_cache[:one_line_comment][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        if (match_len = has_terminal?("//", false, index))
          r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('"//"')
          r1 = nil
        end
        s0 << r1
        if r1
          s2, i2 = [], index
          loop do
            i3, s3 = index, []
            i4 = index
            r5 = _nt_N
            if r5
              @index = i4
              r4 = nil
            else
              @index = i4
              r4 = instantiate_node(SyntaxNode,input, index...index)
            end
            s3 << r4
            if r4
              if index < input_length
                r6 = true
                @index += 1
              else
                terminal_parse_failure("any character")
                r6 = nil
              end
              s3 << r6
            end
            if s3.last
              r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
              r3.extend(OneLineComment0)
            else
              @index = i3
              r3 = nil
            end
            if r3
              s2 << r3
            else
              break
            end
          end
          r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
          s0 << r2
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(OneLineComment1)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:one_line_comment][start_index] = r0

        r0
      end

      def _nt_space
        start_index = index
        if node_cache[:space].has_key?(index)
          cached = node_cache[:space][index]
          if cached
            node_cache[:space][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0 = index
        if (match_len = has_terminal?(" ", false, index))
          r1 = true
          @index += match_len
        else
          terminal_parse_failure('" "')
          r1 = nil
        end
        if r1
          r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
          r0 = r1
        else
          if (match_len = has_terminal?("\t", false, index))
            r2 = true
            @index += match_len
          else
            terminal_parse_failure('"\\t"')
            r2 = nil
          end
          if r2
            r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
            r0 = r2
          else
            @index = i0
            r0 = nil
          end
        end

        node_cache[:space][start_index] = r0

        r0
      end

      def _nt_s
        start_index = index
        if node_cache[:s].has_key?(index)
          cached = node_cache[:s][index]
          if cached
            node_cache[:s][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        s0, i0 = [], index
        loop do
          i1 = index
          r2 = _nt_space
          if r2
            r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
            r1 = r2
          else
            r3 = _nt_N
            if r3
              r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
              r1 = r3
            else
              r4 = _nt_one_line_comment
              if r4
                r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
                r1 = r4
              else
                r5 = _nt_block_comment
                if r5
                  r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
                  r1 = r5
                else
                  @index = i1
                  r1 = nil
                end
              end
            end
          end
          if r1
            s0 << r1
          else
            break
          end
        end
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)

        node_cache[:s][start_index] = r0

        r0
      end

      def _nt_S
        start_index = index
        if node_cache[:S].has_key?(index)
          cached = node_cache[:S][index]
          if cached
            node_cache[:S][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        s0, i0 = [], index
        loop do
          i1 = index
          r2 = _nt_space
          if r2
            r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
            r1 = r2
          else
            r3 = _nt_N
            if r3
              r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
              r1 = r3
            else
              r4 = _nt_one_line_comment
              if r4
                r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
                r1 = r4
              else
                r5 = _nt_block_comment
                if r5
                  r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
                  r1 = r5
                else
                  @index = i1
                  r1 = nil
                end
              end
            end
          end
          if r1
            s0 << r1
          else
            break
          end
        end
        if s0.empty?
          @index = i0
          r0 = nil
        else
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        end

        node_cache[:S][start_index] = r0

        r0
      end

      module N0
      end

      def _nt_n
        start_index = index
        if node_cache[:n].has_key?(index)
          cached = node_cache[:n][index]
          if cached
            node_cache[:n][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        if (match_len = has_terminal?("\r", false, index))
          r2 = true
          @index += match_len
        else
          terminal_parse_failure('"\\r"')
          r2 = nil
        end
        if r2
          r1 = r2
        else
          r1 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r1
        if r1
          if (match_len = has_terminal?("\n", false, index))
            r4 = true
            @index += match_len
          else
            terminal_parse_failure('"\\n"')
            r4 = nil
          end
          if r4
            r3 = r4
          else
            r3 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r3
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(N0)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:n][start_index] = r0

        r0
      end

      module N0
      end

      def _nt_N
        start_index = index
        if node_cache[:N].has_key?(index)
          cached = node_cache[:N][index]
          if cached
            node_cache[:N][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
            @index = cached.interval.end
          end
          return cached
        end

        i0, s0 = index, []
        if (match_len = has_terminal?("\r", false, index))
          r2 = true
          @index += match_len
        else
          terminal_parse_failure('"\\r"')
          r2 = nil
        end
        if r2
          r1 = r2
        else
          r1 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r1
        if r1
          if (match_len = has_terminal?("\n", false, index))
            r3 = true
            @index += match_len
          else
            terminal_parse_failure('"\\n"')
            r3 = nil
          end
          s0 << r3
        end
        if s0.last
          r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
          r0.extend(N0)
        else
          @index = i0
          r0 = nil
        end

        node_cache[:N][start_index] = r0

        r0
      end

    end

    class GrammarParser < Treetop::Runtime::CompiledParser
      include Grammar
    end

  end
end
